# -*- coding: utf-8 -*-
"""Cloud security-zero trust -dataset 2 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KMPcBne9Pl3t0wWXQ8E_YGCMqBs81ZdG
"""

import pandas as pd
train_df = pd.read_csv("/content/UNSW_NB15_training-set (1).csv")
train_df.head()

test_df = pd.read_csv("/content/UNSW_NB15_testing-set.csv")
test_df.head()

train_df.drop('id', axis=1, inplace=True)
test_df.drop('id', axis=1, inplace=True)

cat_col = []
for col in train_df.columns:
  if train_df[col].dtype == 'object':
    cat_col.append(col)
cat_col

from sklearn.preprocessing import LabelEncoder
lab_enc = LabelEncoder()
for col in cat_col:
  train_df[col] = lab_enc.fit_transform(train_df[col])
  test_df[col] = lab_enc.fit_transform(test_df[col])

train_df.dtypes

test_df.dtypes

#  label distribution graph

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(8, 6))
sns.countplot(x='label', data=train_df)
plt.title('Label Distribution in Training Set')
plt.xlabel('Label')
plt.ylabel('Count')
plt.show()

"""# **Dataset splitting and balancing**"""

from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from sklearn.preprocessing import StandardScaler

# Separate features (X) and target variable (y)
X = train_df.drop('label', axis=1)
y = train_df['label']

# Standardize features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Apply SMOTE to balance the training data
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

# pr decision tree classifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, f1_score, recall_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt


clf = DecisionTreeClassifier(
    max_depth=12,
    min_samples_split=3,
    min_samples_leaf=10,
    max_features='sqrt',
    class_weight='balanced',
    random_state=42
)
clf.fit(X_train_resampled, y_train_resampled)

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"F1 Score: {f1:.4f}")
print(f"Recall: {recall:.4f}")

# Classification Report
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=['Predicted 0', 'Predicted 1'],
            yticklabels=['Actual 0', 'Actual 1'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

#  Random Forest classifier

from sklearn.ensemble import RandomForestClassifier # Changed to RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, f1_score, recall_score, classification_report, confusion_matrix

clf = RandomForestClassifier(
    n_estimators=40,
    max_depth=10,
    min_samples_split=10,
    min_samples_leaf=10,
    max_features=5,
    bootstrap=True,
    random_state=42
)

clf.fit(X_train_resampled, y_train_resampled)

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"F1 Score: {f1:.4f}")
print(f"Recall: {recall:.4f}")

# Classification Report
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=['Predicted 0', 'Predicted 1'],
            yticklabels=['Actual 0', 'Actual 1'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

#  xgboost


import xgboost as xgb

# ... (Your existing code for data loading and preprocessing) ...

# Initialize and train the XGBoost Classifier
xgb_clf = xgb.XGBClassifier(
    objective='binary:logistic',  # For binary classification
    eval_metric='logloss',        # Default for binary classification
    use_label_encoder=False,      # Compatible with newer versions
    random_state=42,              # Ensure reproducibility
    max_depth=1,                  # Very shallow trees
    n_estimators=10,              # Minimal boosting rounds
    learning_rate=0.3             # Default learning rate
)
xgb_clf.fit(X_train_resampled, y_train_resampled)

# Make predictions on the test set
y_pred = xgb_clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"F1 Score: {f1:.4f}")
print(f"Recall: {recall:.4f}")

# Classification Report
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=['Predicted 0', 'Predicted 1'],
            yticklabels=['Actual 0', 'Actual 1'])
plt.title('Confusion Matrix for XGBoost')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

#  logistic regressionand

from sklearn.linear_model import LogisticRegression

# Initialize and train the Logistic Regression model
logreg_clf = LogisticRegression(
    random_state=42,
    max_iter=1000,
    solver='lbfgs',
    penalty='l2',
    C=1.0
)
logreg_clf.fit(X_train_resampled, y_train_resampled)

# Make predictions on the test set
y_pred = logreg_clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"F1 Score: {f1:.4f}")
print(f"Recall: {recall:.4f}")

# Classification Report
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=['Predicted 0', 'Predicted 1'],
            yticklabels=['Actual 0', 'Actual 1'])
plt.title('Confusion Matrix for Logistic Regression')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

#  knn Classification

from sklearn.neighbors import KNeighborsClassifier


knn_clf = KNeighborsClassifier(n_neighbors=5)
knn_clf.fit(X_train_resampled, y_train_resampled)

# Make predictions on the test set
y_pred = knn_clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"F1 Score: {f1:.4f}")
print(f"Recall: {recall:.4f}")

# Classification Report
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=['Predicted 0', 'Predicted 1'],
            yticklabels=['Actual 0', 'Actual 1'])
plt.title('Confusion Matrix for KNN')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

#  Naive Bayes
from sklearn.naive_bayes import GaussianNB


gnb_clf = GaussianNB()
gnb_clf.fit(X_train_resampled, y_train_resampled)

# Make predictions on the test set
y_pred = gnb_clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print(f"Accuracy: {accuracy:.4f}")
print(f"Precision: {precision:.4f}")
print(f"F1 Score: {f1:.4f}")
print(f"Recall: {recall:.4f}")

# Classification Report
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=['Predicted 0', 'Predicted 1'],
            yticklabels=['Actual 0', 'Actual 1'])
plt.title('Confusion Matrix for Naive Bayes')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

x_unseen = test_df.drop('label', axis=1)
y_unseen = test_df['label']

# random forest on test_df dataset

# Scale the unseen data using the same scaler fitted on the training data
x_unseen_scaled = scaler.transform(x_unseen)

# Make predictions on the unseen data using the trained RandomForestClassifier
y_pred_unseen = clf.predict(x_unseen_scaled)

# Evaluate the model on the unseen data (optional)
accuracy_unseen = accuracy_score(y_unseen, y_pred_unseen)
precision_unseen = precision_score(y_unseen, y_pred_unseen)
f1_unseen = f1_score(y_unseen, y_pred_unseen)
recall_unseen = recall_score(y_unseen, y_pred_unseen)

print(f"Accuracy on unseen data: {accuracy_unseen:.4f}")
print(f"Precision on unseen data: {precision_unseen:.4f}")
print(f"F1 Score on unseen data: {f1_unseen:.4f}")
print(f"Recall on unseen data: {recall_unseen:.4f}")

print("\nClassification Report for unseen data:\n", classification_report(y_unseen, y_pred_unseen))